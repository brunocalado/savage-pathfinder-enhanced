{"name":"Masterwork Forge for Savage Pathfinder","type":"script","author":"xg4TtZ3QavNbcK8c","img":"icons/tools/smithing/anvil.webp","scope":"global","command":"// CUSTOMIZE\nconst compendiumLabel = 'Savage Pathfinder Gear'; // YOU CAN REPLACE THIS FOR ANOTHER COMPENDIUM LABEL\nconst suffix = '⭐';\nconst craftFolder = 'Craft - Masterwork';\n\n/* Masterwork\nTODO\n- multi compendium for advanced\n\nWeapons \n+1 AP. Masterwork melee and ranged weapons add 300 gp to the cost.\n\nMasterwork arrows, bolts, or other ammunition subtract 1 point of Range penalty at Long or Extreme Range, and cost six additional gold pieces per unit. Masterwork ammunition loses its bonus after use even if recovered.\n\nArmor and shields\nreduce the Minimum Strength requirement by one die type, to a minimum of d4. Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.\n\n*/\n\nconst version = 'v0.5';\nconst icon = \"icons/tools/smithing/anvil.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swpf-core-rules\")?.active) { coreRules = true; }\n\nif ( canvas.tokens.controlled[0]===undefined ) {\n  main();\n} else {\n  main();\n}\n\nasync function main() {\n  let tokenD = canvas.tokens.controlled[0];\n  const items = await getCompendiumEntities( compendiumLabel ); \n  \n  let itemsList = '';\n  for (item of items ) {\n    itemsList += `<option value=\"${item.name}\">\"${item.name}\"</option>`\n  }\n  \n  let template = `\n\n      <h2>Instructions</h2>\n      <p>Choose the item in the field. A Mastework version will be created in to the world.</p>\n      \n      <table>\n      <tbody>\n      \n      <tr align=center>\n      <td>\n          <b>Gear List</b> \n      </td>  \n      </tr>\n      \n      <tr align=center>\n      <td>\n          <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n          <datalist id=\"aeTypes\">\n            ${itemsList}\n          </datalist>        \n      </td>   \n      </tr>\n\n      </tbody>\n      </table>      \n\n      </br>   \n      <h3>Options</h3>\n      <input type = \"checkbox\" id = \"shareItem\" name = \"shareItem\" checked>\n      <label for = \"shareItem\"> Share with Players? </ label>        \n  `;\n  \n  new Dialog({\n    title: `Masterwork Forge for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: `<i class=\"fas fa-magic\"></i> Craft`,\n        callback: async (html) => {\n          let itemLabel = html.find(\"#aeType\")[0].value;\n          let shareItem = html.find(\"#shareItem\")[0].checked;\n          \n          let item = await getItem( compendiumLabel, itemLabel );\n          if(!item) {\n            ui.notifications.warn('You must select an item!');\n            return;\n          }\n          const itemData = await forgeMasterwork( item.toObject(), shareItem );\n          const forgedItem = await Item.createDocuments([itemData]);                \n          game.items.get(forgedItem[0].id).sheet.render(true);\n        // END CALLBACK  \n        },\n      }\n    },\n    default: \"ok\"\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nasync function getCompendiumEntities( compendiumLabel='Savage Pathfinder Gear' ) {\n  const compendium = await game.packs.find(p=>p.metadata.label==compendiumLabel);\n  if (!compendium) {\n    console.warn( \"Macros of SWADE: The compendium couldn't be found.\" );\n    return;\n  }\n  let items = await compendium.getDocuments();\n  items = await items.filter(p=> (p.type=='armor' || p.type=='weapon'|| p.type=='shield' || p.type=='gear') && p.name!=\"#[CF_tempEntity]\" );\n  return items;\n}  \n\nasync function getItem( compendiumLabel='Savage Pathfinder Gear', itemLabel ) {\n  let items = await getCompendiumEntities( compendiumLabel );\n  return items.find(p=> p.name==itemLabel);\n}    \n\n// v0.3\nasync function forgeMasterwork( data, shareItem ) {\n  let description = '';\n  if ( data.type=='shield') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.data.price + 300;    \n  } else if ( data.type=='armor') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.data.price + 150;       \n  } else if ( data.type=='weapon') {\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>+1 AP. Masterwork melee and ranged weapons add 300 gp to the cost.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 300;    \n    data.system.ap = parseInt(data.system.ap) + 1;    \n  } else if (data.type=='shield') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 150;    \n  } else if (data.type=='gear') {\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Masterwork arrows, bolts, or other ammunition subtract 1 point of Range penalty at Long or Extreme Range, and cost six additional gold pieces per unit.</p>          \n    <p>Masterwork ammunition loses its bonus after use even if recovered.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 6;    \n  }\n  \n  data.name = `${suffix} ${data.name}`;\n  if (shareItem) {\n    data.ownership.default = 2;\n  }\n  \n  const folder = await getFolder(craftFolder, 'Item');\n  data.folder = folder;\n  return data;\n}\n\n// Folder v0.1\nasync function getFolder(folderName, folderType) {\n  let folder;\n  if( game.folders.filter(f => f.type === folderType).find(f => f.name === folderName)===undefined) {\n    folder = await Folder.create( {\n      name: folderName,\n      type: folderType\n    } );\n  } else {\n    folder = game.folders.find( f => f.name === folderName);\n  }\n  return folder;\n}","flags":{"core":{"sourceId":"Macro.MYGZrFnfjHpwSjMH"},"cf":{"id":"temp_h089v27spnn"}},"_stats":{"systemId":"swade","systemVersion":"2.1.7","coreVersion":"10.291","createdTime":1665669730327,"modifiedTime":1673281374192,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"2ISVEAecMz8Kduzg"}
{"name":"Scroll Craft for Savage Pathfinder","type":"script","author":"xg4TtZ3QavNbcK8c","img":"icons/sundries/scrolls/scroll-plain-red.webp","scope":"global","command":"// CUSTOMIZE\nconst compendiumLabel = 'Savage Pathfinder Powers'; // YOU CAN REPLACE THIS FOR ANOTHER COMPENDIUM LABEL\nconst rankNovice = 'Novice';\nconst rankSeasoned = 'Seasoned';\nconst rankVeteran = 'Veteran';\nconst rankHeroic = 'Heroic';\nconst rankLegendary = 'Legendary';\nconst craftFolder = 'Craft - Scroll';\n\n/* Scroll Craft for Savage Pathfinder \nsource: \nicon: \n\nTODO\n\nCraft: The cost of a scroll is equal to its \npower’s Rank × the number of Power Points it uses; then multiply that total by 25 gp. A scroll of bolt with AP 2, for example, is Novice (1) × 2 Power Points, × 25 gp = 50 gp. A scroll's market price is double its cost to craft.\n\n*/\n\nconst version = 'v0.7';\nconst icon = \"icons/sundries/scrolls/scroll-plain-red.webp\";\n\nconst rulesLink = '@UUID[Compendium.swpf-core-rules.swpf-rules.swpfcore06magici.JournalEntryPage.06magicitems0000#scrolls]{SCROLLS}';\nconst coreRules = game.modules.get(\"swpf-core-rules\")?.active;\n\nmain();\n\nasync function main() {\n  let tokenD = canvas.tokens.controlled[0];\n  const powers = await getCompendiumEntities( compendiumLabel ); \n  \n  let powersList = '';\n  for (power of powers ) {\n    powersList += `<option value=\"${power.name}\">\"${power.name}\"</option>`\n  }\n  \n  let template = `\n\n      <h2>Instructions</h2>\n      <p>Choose the power in left field. Add the modifiers points to the right field.</p>\n      \n      <table>\n      <tbody>\n      \n      <tr align=center>\n      <td>\n          <b>Powers List</b> \n      </td>\n      <td>\n          <b>Extra Points</b> \n      </td>      \n      </tr>\n      \n      <tr align=center>\n      <td>\n          <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n          <datalist id=\"aeTypes\">\n            ${powersList}\n          </datalist>        \n      </td>\n      <td>\n          <input id=\"modifierPoints\" name=\"modifierPoints\" type=\"Number\" value=\"0\" min=0 max=30>\n      </td>      \n      </tr>\n\n      </tbody>\n      </table>      \n      \n      </br>\n      <h3>Modifiers List</h3>\n      <textarea id=\"modifierMessage\" name=\"modifierMessage\" rows=\"3\"></textarea>\n      \n      </br>\n      <h3>Options</h3>\n      <input type = \"checkbox\" id = \"shareItem\" name = \"shareItem\" checked>\n      <label for = \"shareItem\"> Share with Players? </ label>          \n      </br></br>\n  `;\n  \n  new Dialog({\n    title: `Scroll Craft for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {  \n      ok: {\n        label: `<i class=\"fas fa-magic\"></i> Craft`,\n        callback: async (html) => {\n          let powerLabel = html.find(\"#aeType\")[0].value;\n          let modifierPoints = Number( html.find('[name=\"modifierPoints\"]')[0].value );\n          let shareItem = html.find(\"#shareItem\")[0].checked;\n          let modifierMessage = html.find('[name=\"modifierMessage\"]')[0].value;\n\n          let power = await getPower( compendiumLabel, powerLabel );\n          if(!power) {\n            ui.notifications.warn('You must select a power!');\n            return;\n          }\n          let rankMultiplier = rankToNumber( power.system.rank );\n          let powerPointCost = Number(power.system.pp);\n          let finalCraftCost = (rankMultiplier*(powerPointCost+modifierPoints))*25;\n          let extraMessage = `<div class=\"swpf-core\">\n          <h2>Craft Notes</h2>\n          <p><b>Modifiers List:<b> ${modifierMessage}</p>\n          <p>Craft Cost: ${finalCraftCost}</p>\n          <p>Market Cost: ${finalCraftCost*2}</p>\n          <p><b>Reading a scroll is an action</b> and requires a Smarts roll or arcane skill roll (caster’s choice). If the roll is successful, the power activates and the scroll fades.</p>`;\n          \n          if (coreRules) {\n            extraMessage += `<p>Rules: ${rulesLink}</p>`;\n          }\n          extraMessage += `<h2>Power Description</h2></div>`;\n\n          const folder = await getFolder(craftFolder, 'Item');\n\n          let data = {\n            \"name\": `Scroll: ${power.name}`,\n            \"type\": \"consumable\",\n            \"img\": icon,\n            \"folder\": folder,\n            \"system\": {\n              \"description\": extraMessage + power.system.description,\n              \"quantity\": 1,\n              \"weight\": 0.1,\n              \"price\": finalCraftCost,\n              \"charges\": {\n                \"value\": 1,\n                \"max\": 1\n              },\n              \"destroyOnEmpty\": true,\n              \"source\": \"Scroll Craft for Savage Pathfinder\"\n            },\n            \"ownership\": {\n              \"default\": shareItem ? 2 : 0\n            }            \n          };    \n          \n          const scroll = await Item.createDocuments([data]);                \n          game.items.get(scroll[0].id).sheet.render(true);\n        }\n      }\n    },\n    default: \"ok\"\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nasync function getCompendiumEntities( compendiumLabel ) {\n  const compendium = await game.packs.find(p=>p.metadata.label==compendiumLabel);\n  if (!compendium) {\n    console.warn( \"The compendium couldn't be found.\" );\n    return;\n  }\n  let powers = await compendium.getDocuments();\n  powers = powers.filter(p=> p.type=='power');\n  return powers;\n}    \n\nasync function getPower( compendiumLabel, powerLabel ) {\n  let powers = await getCompendiumEntities( compendiumLabel );\n  return powers.find(p=> p.name==powerLabel);\n}    \n\nfunction rankToNumber( rank ) {\n  switch (rank) {\n    case rankNovice:\n      return 1;\n    case rankSeasoned:\n      return 2;    \n    case rankVeteran:\n      return 3;    \n    case rankHeroic:\n      return 4;   \n    case rankLegendary:\n      return 5;   \n    default:\n      console.log(`Unknown rank: ${rank}.`);\n  }\n}    \n\n// Folder v0.1\nasync function getFolder(folderName, folderType) {\n  let folder;\n  if( game.folders.filter(f => f.type === folderType).find(f => f.name === folderName)===undefined) {\n    folder = await Folder.create( {\n      name: folderName,\n      type: folderType\n    } );\n  } else {\n    folder = game.folders.find( f => f.name === folderName);\n  }\n  return folder;\n}","flags":{"core":{"sourceId":"Macro.4RoaIkCCCsPeOYdT"},"cf":{"id":"temp_h089v27spnn"}},"_stats":{"systemId":"swade","systemVersion":"2.1.7","coreVersion":"10.291","createdTime":1665669732798,"modifiedTime":1674496504585,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"8T2eds6S92GkCEmi"}
{"name":"Wealth Analysis for Savage Pathfinder","type":"script","author":"xg4TtZ3QavNbcK8c","img":"icons/commodities/currency/coins-plain-stack-gold-yellow.webp","scope":"global","command":"/* Wealth Analysis for Savage Pathfinder \nsource: \nicon: icons/commodities/currency/coins-plain-stack-gold-yellow.webp\n\nTODO\n*/\n\nconst version = 'v0.5';\nconst icon = \"icons/commodities/currency/coins-plain-stack-gold-yellow.webp\";\n\nif ( canvas.tokens.controlled[0]===undefined ) {\n  ui.notifications.error(\"Please, select some tokens.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let tokens = canvas.tokens.controlled;\n\n  /* Show actual xp points*/\n  let currentHeroPointsList = '';\n  for (var tokenD of tokens) {\n    const character = game.actors.get(tokenD.actor.id);\n    const rank = character.system.advances.rank;\n    var copper = getCoinsTotal(getCoins(character, 'Copper') );\n    var silver = getCoinsTotal(getCoins(character, 'Silver') );\n    var gold = getCoinsTotal(getCoins(character, 'Gold') );\n    var platinum = getCoinsTotal(getCoins(character, 'Platinum') );\n    \n    var totalCoins =  Math.round( Math.floor(silver/10) + Math.floor(copper/100) + Math.floor(platinum*10) + parseInt(gold) );\n    \n    var totalGearValue = Math.round( getGearPrice(character) );\n    currentHeroPointsList += `<p><b>${character.name}</b> <b>(${rank})</b> - ${ suggestion(rank, totalCoins+totalGearValue) }</p>`;\n    currentHeroPointsList += `<ul>\n    <li>Total: <b>${totalCoins+totalGearValue}</b></li>\n    <li>Gold (coins): <b>${totalCoins}</b></li>\n    <li>Goods and Magic Items: <b>${totalGearValue}</b></li>    \n    </ul>\n    `;\n  }    \n\n  let template = ` \n  <h2>Core (p16)</h2>\n  <p><b>Seasoned heroes have 10,000</b> gold pieces worth of goods and magic items, <b>Veteran</b> characters get <b>40,000</b>, <b>Heroic 150,000</b>, and <b>Legendary 500,000</b>. Starting characters (Novice) have 300 gold.</p>\n  \n  <h2>Current Wealth</h2>\n  <ul>\n    ${currentHeroPointsList}\n  </ul>\n  `;\n  \n  new Dialog({\n    title: ` Wealth Analysis for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"OK\",\n        callback: async (html) => {\n        }\n      }\n    },\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nfunction getCoins(character, coinType) {\n  let coins=0;\n  if (coinType=='Copper') {\n    coins = character.items.filter(e => e.name==='Copper');  \n  } else if (coinType=='Silver') {\n    coins = character.items.filter(e => e.name==='Silver');   \n  } else if (coinType=='Gold') {\n    coins = character.items.filter(e => e.name==='Gold');   \n  } else if (coinType=='Platinum') {\n    coins = character.items.filter(e => e.name==='Platinum');      \n  }  \n  return coins;\n}\n\nfunction getCoinsTotal(coins) {\n  if (coins.length>0) {\n    const sum = coins.reduce((total, item) => total += item.system.quantity, 0);\n    return sum;\n  } else {\n    return 0;\n  }  \n}\n\nfunction getGearPrice(character) {\n  let gear;\n  gear = character.items.filter(e => e.type==='gear' || e.type==='weapon' || e.type==='armor' || e.type==='shield');  \n  \n  let total=0;\n  for (const item of gear) {\n    if (item.system.price) total = total + parseFloat(item.system.price);\n  }\n  return total;\n}\n\nfunction suggestion(rank, total) {\n  let selectedMessage;\n\n  if (rank=='Novice') { \n    if (total<300) {\n      selectedMessage=1; //Give me More Gold!\n    } else if (total>=300 && total<10000) {\n      selectedMessage=2;//It's OK.\n    } else if (total>=10000) {\n      selectedMessage=3;//Too Much Gold on this guy!\n    }    \n  } else if (rank=='Seasoned') { \n    if (total<10000) {\n      selectedMessage=1; //Give me More Gold!\n    } else if (total>=10000 && total<40000) {\n      selectedMessage=2;//It's OK.\n    } else if (total>=40000) {\n      selectedMessage=3;//Too Much Gold on this guy!\n    }     \n  } else if (rank=='Veteran') { \n    if (total<40000) {\n      selectedMessage=1; //Give me More Gold!\n    } else if (total>=40000 && total<150000) {\n      selectedMessage=2;//It's OK.\n    } else if (total>=150000) {\n      selectedMessage=3;//Too Much Gold on this guy!\n    }       \n  } else if (rank=='Heroic') { \n    if (total<150000) {\n      selectedMessage=1; //Give me More Gold!\n    } else if (total>=150000 && total<500000) {\n      selectedMessage=2;//It's OK.\n    } else if (total>=500000) {\n      selectedMessage=3;//Too Much Gold on this guy!\n    }       \n  } else if (rank=='Legendary') { \n    if (total<500000) {\n      selectedMessage=1; //Give me More Gold!\n    } else if (total>=500000) {\n      selectedMessage=2;//It's OK.\n    }     \n  }\n\n  if (selectedMessage==1) {\n    return `<b style=\"color:green;\">Give me More Gold!</b>`;\n  } else if (selectedMessage==2) {\n    return `<b style=\"color:black;\">It's OK.</b>`;\n  } else if (selectedMessage==3) {\n    return `<b style=\"color:red;\">Too Much Gold on this guy!</b>`;\n  }\n}","flags":{"core":{"sourceId":"Macro.MV6qNfnaSEc9OaVi"},"cf":{"id":"temp_h089v27spnn"}},"_stats":{"systemId":"swade","systemVersion":"2.0.6","coreVersion":"10.288","createdTime":1665669734496,"modifiedTime":1665751703811,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"BFRXIn8VDmZqlOs3"}
{"name":"Coin Manager for Savage Pathfinder","type":"script","scope":"global","author":"xg4TtZ3QavNbcK8c","img":"icons/commodities/currency/coins-plain-gold.webp","command":"/* Coin Manager for Savage Pathfinder \nsource: \nicon: icons/commodities/currency/coins-plain-gold.webp\n\nTODO\n*/\n\nconst version = 'v1.4';\nconst icon = \"icons/commodities/currency/coins-plain-gold.webp\";\n\nconst iconCopper = \"icons/commodities/currency/coins-assorted-mix-platinum.webp\";\nconst iconSilver = \"icons/commodities/currency/coins-assorted-mix-silver.webp\";\nconst iconGold = \"icons/commodities/currency/coins-plain-gold.webp\";\nconst iconPlatinum = \"icons/commodities/currency/coin-embossed-unicorn-silver.webp\";\n\nconst rulesLink = '@UUID[Compendium.swpf-core-rules.swpf-rules.swpfcore02gear00.JournalEntryPage.02gear0000000000#currency]{CURRENCY}';\n\nlet coreRules = false;\nif (game.modules.get(\"swpf-core-rules\")?.active) { coreRules = true; }\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let tokens = canvas.tokens.controlled;\n  let playersNames = tokens.map((p=> p.name)); \n\n\n  let playerNameList = `<option value=\"everyone\" selected>Everyone</option>`;\n  //let playerNameList=``;\n  for (var tokenD of tokens) {\n    playerNameList += `<option value=\"${tokenD.actor.id}\">${tokenD.name}</option>`;\n  }  \n\n  /* Show actual xp points*/\n  let currentHeroPointsList = '';\n  for (var tokenD of tokens) {\n    var copper = getCoinsTotal(getCoins(tokenD.actor.id, 'Copper') );\n    var silver = getCoinsTotal(getCoins(tokenD.actor.id, 'Silver') );\n    var gold = getCoinsTotal(getCoins(tokenD.actor.id, 'Gold') );\n    var platinum = getCoinsTotal(getCoins(tokenD.actor.id, 'Platinum') );\n    currentHeroPointsList += `<p><b>${tokenD.name}</b></p>`;\n    currentHeroPointsList += `<ul><li>Copper: <b>${copper}</b> • Silver: <b>${silver}</b> • Gold: <b>${gold}</b> • Platinum: <b>${platinum}</b></li></ul>`;\n  }    \n\n  let template = `\n    <style type=\"text/css\">\n      .tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n      .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n        font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n      .tg .tg-baqh{text-align:center;vertical-align:top}\n      .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n    \n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-xwyw\" colspan=\"4\"><b>Choose: </b><select id=\"playerName\" style=\"width: 200px\">${playerNameList}</select></td>\n      </tr>\n      <tr>      \n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconCopper}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Copper</span>\n          </div>        \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconSilver}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Silver</span>\n          </div>          \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconGold}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Gold</span>\n          </div>         \n        </td>\n        <td class=\"tg-baqh\">\n          <div>\n            <img src=\"${iconPlatinum}\" style=\"vertical-align:middle\" width=\"24\" height=\"24\">\n            <span style=\"\">Platinum</span>\n          </div>         \n        </td>\n      </tr>\n      <tr>\n        <td class=\"tg-baqh\">\n          <input id=\"copper\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"silver\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"gold\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n        <td class=\"tg-baqh\">\n          <input id=\"platinum\" type=\"number\" min=\"-1000\" max=\"1000\" style=\"width: 100%;\" value=0>\n        </td>\n      </tr>\n    </tbody>\n    </table>\n \n  <h2>Current Coins</h2>\n  <ul>\n    ${currentHeroPointsList}\n  </ul>\n  `;\n  \n  new Dialog({\n    title: `Coin Manager for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Apply\",\n        callback: async (html) => {\n          coinManager(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\n\n// -------------------------------------------------------\n// Functions\nasync function coinManager(html) {\n  let actorID = html.find(\"#playerName\")[0].value;  \n  let copper = html.find(\"#copper\")[0].value;  \n  let silver = html.find(\"#silver\")[0].value; \n  let gold = html.find(\"#gold\")[0].value; \n  let platinum = html.find(\"#platinum\")[0].value; \n  \n  if (actorID=='everyone') {    \n    let tokens = canvas.tokens.controlled;\n    for (var tokenD of tokens) {\n      let actorid = tokenD.actor.id;\n      //console.log('Token ID: ' + actorid)\n      coinMessage(actorid, copper, silver, gold, platinum);\n      updateHeroCoins(actorid, copper, silver, gold, platinum);\n    }\n  } else { \n    coinMessage(actorID, copper, silver, gold, platinum);\n    updateHeroCoins(actorID, copper, silver, gold, platinum);\n  }  \n}\n\nasync function updateHeroCoins(actorID, copper, silver, gold, platinum) {\n  let character = game.actors.get(actorID);\n  let copperCurrent = getCoinsTotal(getCoins(actorID, 'Copper', true) );\n  let silverCurrent = getCoinsTotal(getCoins(actorID, 'Silver', true) );\n  let goldCurrent = getCoinsTotal(getCoins(actorID, 'Gold', true) );\n  let platinumCurrent = getCoinsTotal(getCoins(actorID, 'Platinum', true) );  \n  \n  // create missing coins + Patch actor\n  await patchHeroCoins(actorID);\n  \n  // add/remove coins\n  updateCoins(actorID, copperCurrent, copper, 'Copper');\n  updateCoins(actorID, silverCurrent, silver, 'Silver');\n  updateCoins(actorID, goldCurrent, gold, 'Gold');\n  updateCoins(actorID, platinumCurrent, platinum, 'Platinum');\n}\n\nasync function createCoin(actorID, coinName) { \n  let missingIcon;\n  let rules = '';\n  switch (coinName) {\n    case 'Copper':\n      missingIcon = iconCopper;\n      break;\n    case 'Silver':\n      missingIcon = iconSilver;\n      break;\n    case 'Gold':\n       missingIcon = iconGold;\n      break;\n    case 'Platinum':\n      missingIcon = iconPlatinum;\n      break;\n  }  \n  \n  rules += `<table><colgroup> <col/> <col/> <col/> <col/> <col/> </colgroup><tbody><tr><th class=\"main-heading\" colspan=\"5\">Coins &amp; exchange value</th></tr><tr><th class=\"sub-heading left\">Coin</th><th class=\"sub-heading\">CP</th><th class=\"sub-heading\">SP</th><th class=\"sub-heading\">GP</th><th class=\"sub-heading\">PP</th></tr><tr><td>Copper (cp)</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td><td class=\"centered\">1/100</td><td class=\"centered\">1/1,000</td></tr><tr><td>Silver (sp)</td><td class=\"centered\">10</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td><td class=\"centered\">1/100</td></tr><tr><td>Gold (gp)</td><td class=\"centered\">100</td><td class=\"centered\">10</td><td class=\"centered\">1</td><td class=\"centered\">1/10</td></tr><tr><td>Platinum (pp)</td><td class=\"centered\">1,000</td><td class=\"centered\">100</td><td class=\"centered\">10</td><td class=\"centered\">1</td></tr></tbody></table>`; \n  \n  if (coreRules) {\n    rules += `</br>${rulesLink}`;\n  }\n  \n  //let character = game.actors.contents.filter((t) => t.id === actorID)[0];  \n  let character = game.actors.get(actorID);\n  let data = [{\n    name: coinName,\n    type: 'gear',\n    img: missingIcon,    \n    data: {\n      \"description\": `<p>${rules}</p>`,\n      \"quantity\": 0\n    }\n  }];  \n  const createCoin = await character.createEmbeddedDocuments('Item', data);\n}\n\nasync function updateCoins(actorID, currentCoins, newCoins, coinType) {\n  if (newCoins!=0) {\n    //let character = game.actors.contents.filter((t) => t.id === actorID)[0];  \n    let character = game.actors.get(actorID);\n    let coinsTotal = parseInt(currentCoins)+parseInt(newCoins);\n    let coin = getCoins(actorID, coinType, true)[0];            \n    \n    // Check\n    if ( (coinsTotal)<=0 ) {\n      coinsTotal = 0;\n    }\n    \n    await coin.update({\n      [\"system.quantity\"]: coinsTotal\n    });    \n  }\n}\n\nasync function patchHeroCoins(actorID) {\n  let character = game.actors.get(actorID);  \n\n  // Add missing coins\n  if (getCoins(actorID, 'Copper').length==0) await createCoin(actorID, 'Copper');   \n  if (getCoins(actorID, 'Silver').length==0) await createCoin(actorID, 'Silver');\n  if (getCoins(actorID, 'Gold').length==0) await createCoin(actorID, 'Gold');   \n  if (getCoins(actorID, 'Platinum').length==0) await createCoin(actorID, 'Platinum');\n\n  let copperCurrent = await getCoins(actorID, 'Copper');\n  let silverCurrent = await getCoins(actorID, 'Silver');\n  let goldCurrent = await getCoins(actorID, 'Gold');\n  let platinumCurrent = await getCoins(actorID, 'Platinum');  \n  \n  if (copperCurrent.length>1) { // join\n    await patchCoin(actorID, 'Copper', getCoinsTotal(copperCurrent));\n  }\n  if (silverCurrent.length>1) {\n    await patchCoin(actorID, 'Silver', getCoinsTotal(silverCurrent));\n  } \n  if (goldCurrent.length>1) {\n    await patchCoin(actorID, 'Gold', getCoinsTotal(goldCurrent));\n  }\n  if (platinumCurrent.length>1) {\n    await patchCoin(actorID, 'Platinum', getCoinsTotal(platinumCurrent));\n  } \n  \n}\n\nasync function patchCoin(actorID, coinType, coinsTotal) {\n  let character = game.actors.get(actorID);\n  \n  let coins = getCoins(actorID, coinType, true);  \n  coins = coins.splice(1);\n  const ids = coins.map( coin => coin.id );\n  await character.deleteEmbeddedDocuments('Item', ids);        \n  // update\n  let coin = getCoins(actorID, coinType, true)[0];  \n  await coin.update({\n    [\"system.quantity\"]: coinsTotal\n  }); \n}\n\nfunction getCoins(actorID, coinType, isActor=false) {\n  let character = game.actors.get(actorID);\n  \n  let coins=0;\n  if (coinType=='Copper') {\n    coins = character.items.filter(e => e.name==='Copper');  \n  } else if (coinType=='Silver') {\n    coins = character.items.filter(e => e.name==='Silver');   \n  } else if (coinType=='Gold') {\n    coins = character.items.filter(e => e.name==='Gold');   \n  } else if (coinType=='Platinum') {\n    coins = character.items.filter(e => e.name==='Platinum');      \n  }  \n  return coins;\n}\n\nfunction getCoinsTotal(coins) {\n  if (coins.length>0) {\n    const sum = coins.reduce((total, item) => total += item.system.quantity, 0);\n    return sum;\n  } else {\n    return 0;\n  }  \n}\n\nfunction coinMessage(actorID, copper, silver, gold, platinum) {\n  let message = ``;\n  let copperCurrent = getCoinsTotal(getCoins(actorID, 'Copper', true) );\n  let silverCurrent = getCoinsTotal(getCoins(actorID, 'Silver', true) );\n  let goldCurrent = getCoinsTotal(getCoins(actorID, 'Gold', true) );\n  let platinumCurrent = getCoinsTotal(getCoins(actorID, 'Platinum', true) );  \n  let character = game.actors.get(actorID);\n\n  message += `<h2>${character.name}</h2> \n  <h3>Current + <b style=\"color:red;\">Change</b></h3>\n  <ul><li>Copper: <b>${copperCurrent}</b> + <b style=\"color:red;\">${copper}</b></li>\n  <li>Silver: <b>${silverCurrent}</b> + <b style=\"color:red;\">${silver}</b></li> \n  <li>Gold: <b>${goldCurrent}</b> + <b style=\"color:red;\">${gold}</b></li>\n  <li>Platinum: <b>${platinumCurrent}</b> + <b style=\"color:red;\">${platinum}</b></li></ul>\n  `;  \n\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n}","flags":{"core":{"sourceId":"Macro.mYJccgzu19lJLLrG"}},"_stats":{"systemId":"swade","systemVersion":"2.0.6","coreVersion":"10.288","createdTime":1665749447980,"modifiedTime":1665750020605,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"FxPtf0UXhy6ltHl6"}
{"name":"Savage Pathfinder - Enhanced - Macro Manager","type":"script","scope":"global","author":"xg4TtZ3QavNbcK8c","img":"modules/macro-manager/assets/icons/settings.svg","command":"/*================================\nYou can use a Macro Manager to call macros from compendiums!\n================================*/\nconst macroList = \"Active Effect Builder;Masterwork Forge for Savage Pathfinder;Scroll Craft for Savage Pathfinder;Wealth Analysis for Savage Pathfinder;Coin Manager for Savage Pathfinder;Enchantments for Savage Pathfinder;\";\nconst compendiumList = \"Macros - SWPF - Enhanced\";\n\n// --------------------\nconst mm = game.modules.get('macro-manager')?.api.mm;\n\nconst data = {\n  \"macroList\": macroList,\n  \"title\": \"GM - SWPF - Enhanced\",\n  \"persistent\": false,\n  \"compendiumList\" : compendiumList\n}\n\nmm.openCompendiumMacroManager( data );","flags":{"core":{"sourceId":"Macro.9BfGwaAfyn6NTkHs"}},"_stats":{"systemId":"swade","systemVersion":"2.0.6","coreVersion":"10.288","createdTime":1665752229634,"modifiedTime":1666896010338,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"H4HLv7rXMieoUliT"}
{"name":"Autored Overwrite Menus","type":"script","scope":"global","author":"xg4TtZ3QavNbcK8c","img":"icons/magic/symbols/elements-air-earth-fire-water.webp","command":"// v0.1\n// TODO: https://github.com/MrVauxs/pf2e-jb2a-macros/blob/main/module/updateMenu.js\n\nmain();\nconst debouncedReload = debounce(() => location.reload(), 1000); // RELOAD AFTER CHANGE\n\n\nasync function main() {\n  const templateData = ` \n    <h2>WARNING</h2>    \n    <p>This will replace you automated animations settings with Savage Pathfinder Enhanced autorec file. This can't be undone. Make a backup before.</p>\n    <p>Your world will reload after load the autorec file.</p>\n    <p>You can cancel this action now.</p>\n  `;                \n\n  new Dialog({\n    title: `OVERWRITE AUTOMATED ANIMATIONS MENUS`,\n    content: templateData,\n    buttons: {\n      roll: {\n        label: \"OK\",\n        callback: (html) => {\n          replaceAAMenus();\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true);\n}\n\nasync function replaceAAMenus() {\n  const filePath= 'modules/savage-pathfinder-enhanced/config/autorec.json';\n  const inObject = {\n    melee: true,\n    range: true,\n    ontoken: true,\n    templatefx: true,\n    aura: true,\n    preset: true,\n    aefx: true\n  };\n  const parsedJSON = await getJSON(filePath);\n\n  AutomatedAnimations.AutorecManager.overwriteMenus(parsedJSON , inObject)\n  \n  debouncedReload();\n}\n\nasync function getJSON(filePath) {\n  const response = await fetch(filePath);\n  const json = await response.json();  \n  return JSON.stringify(json);\n}","ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"flags":{"core":{"sourceId":"Macro.Xbznf8yF5vAznuDx"}},"_stats":{"systemId":"swade","systemVersion":"2.1.7","coreVersion":"10.291","createdTime":1674348577025,"modifiedTime":1674351170488,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"_id":"TJTLZycNQzwFxboZ"}
{"name":"Active Effect Builder","type":"script","scope":"global","author":"xg4TtZ3QavNbcK8c","img":"icons/magic/symbols/rune-sigil-green.webp","command":"/* AE Builder\ndocs: https://gitlab.com/peginc/swade/-/wikis/active-effects#attribute-keys\n*/\n\nconst version = 'v1.9';\nconst icon = \"icons/magic/symbols/rune-sigil-green.webp\";\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  let tokenD = canvas.tokens.controlled[0];\n  let skills = tokenSkillReaderLabel(tokenD);\n\n  let aeExpirationBehavior = `<select id=\"select-aeExpirationBehavior\" name=\"select-aeExpirationBehavior\">`;\n  aeExpirationBehavior += `<option value=\"startOfTheTurn\">Start of the Turn</option>`;\n  aeExpirationBehavior += `<option value=\"EndOfTheTurn\" selected=\"selected\">End of the Turn</option>`;\n  aeExpirationBehavior += `</select>`;\n  \n  let dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Name:</label>\n        <input id=\"aename\" name=\"aename\" type=\"text\" value=\"effect 1\">\n      </div>    \n      <div class=\"form-group\">\n      \n        <label for=\"aeType\">Effect:</label>\n        <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n        <datalist id=\"aeTypes\">\n          <option value=\"system.stats.toughness.armor\">Armor</option>          \n          <option value=\"system.stats.size\">Size</option>\n          \n          <option value=\"system.stats.speed.value\">Pace</option>\n          <option value=\"system.stats.speed.runningDie\">Running Die</option>          \n          <option value=\"system.stats.speed.runningMod\">Running Modifier</option>                    \n\n          <option value=\"system.stats.parry.value\">Parry</option>\n          <option value=\"system.stats.toughness.value\">Toughness</option>\n          \n          <option value=\"system.status.isShaken\">Shaken</option>\n          <option value=\"system.status.isDistracted\">Distracted</option>\n          <option value=\"system.status.isVulnerable\">Vulnerable</option>\n          <option value=\"system.status.isStunned\">Stunned</option>\n          <option value=\"system.status.isEntangled\">Entangled</option>\n          <option value=\"system.status.isBound\">Bound</option>          \n          \n          <option value=\"system.attributes.agility.die.sides\">Agility Die</option>         \n          <option value=\"system.attributes.smarts.die.sides\">Smarts Die</option>         \n          <option value=\"system.attributes.spirit.die.sides\">Spirit Die</option>         \n          <option value=\"system.attributes.strength.die.sides\">Strength Die</option>         \n          <option value=\"system.attributes.vigor.die.sides\">Vigor Die</option>         \n\n          <option value=\"system.attributes.agility.die.modifier\">Agility Modifier</option>         \n          <option value=\"system.attributes.smarts.die.modifier\">Smarts Modifier</option>         \n          <option value=\"system.attributes.spirit.die.modifier\">Spirit Modifier</option>         \n          <option value=\"system.attributes.strength.die.modifier\">Strength Modifier</option>         \n          <option value=\"system.attributes.vigor.die.modifier\">Vigor Modifier</option>         \n\n          <option value=\"system.initiative.hasLevelHeaded\">Level Headed</option>         \n          <option value=\"system.initiative.hasImpLevelHeaded\">Improved Level Headed</option>         \n          <option value=\"system.initiative.hasHesitant\">Hesitant</option>         \n          <option value=\"system.initiative.hasQuick\">Quick</option>         \n\n          <option value=\"system.attributes.strength.encumbranceSteps\">Encumbrance Steps</option>\n          \n          <option value=\"simple.tracker\">Simple Tracker</option>                             \n        </datalist>  \n      </div>\n      <div class=\"form-group\">\n        <label>Value:</label>\n        <input id=\"aevalue\" name=\"aevalue\" type=\"text\" value=\"2\">\n      </div>   \n\n      <div class=\"form-group\">\n        <label>Turns:</label>\n        <input id=\"aeturns\" name=\"aeturns\" type=\"text\" value=\"0\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label>Expiration Behavior:</label>\n        ${aeExpirationBehavior}\n      </div>      \n    </form>\n\n    <script>\n      var list = document.getElementById('aeTypes');\n      var skills2 = Array( ${skills} );\n    \n      skills2.forEach(function(item){\n         var option = document.createElement('option');\n         option.value = item + ' Skill Die';\n         option.textContent = item;\n         list.appendChild(option);\n      });\n      skills2.forEach(function(item){\n         var option = document.createElement('option');\n         option.value = item + ' Skill Modifier';\n         option.textContent = item;\n         list.appendChild(option);\n      });    \n    </script>\n`;\n\n  let applyChanges = false;\n  let dialogButtons = {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: (html) => {\n        applyActiveEffect(html);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    }   \n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: `Active Effect Builder - ${version}`,\n    content: dialogue_content,\n    buttons: dialogButtons,\n    default: \"yes\",\n  }).render(true);\n}\n\nasync function applyActiveEffect(html) {\n  let aename = html.find('[name=\"aename\"]')[0].value;\n  let aekey = html.find(\"#aeType\")[0].value;\n  let aevalue = html.find('[name=\"aevalue\"]')[0].value;\n  let aeturns = html.find('[name=\"aeturns\"]')[0].value;\n  let aeExpirationBehavior = html.find('[name=\"select-aeExpirationBehavior\"]')[0].value;\n\n  let myActiveEffect;\n  let myChanges=[];\n  let aemode = keyToMode(aekey);\n  aevalue = keyToValue(aekey, aevalue);\n  let tagToKey = skillToKey(aekey);\n  if (tagToKey!=-1) {\n    aekey = tagToKey;\n  }\n\n  if ( aename=='effect 1') aename = autoNaming(aekey);\n  \n  if ( aekey!='simple.tracker') {\n    myChanges = [{\n      \"key\": aekey,\n      \"value\": aevalue, mode: aemode \n    }];    \n  }\n\n  if ( aeturns!=0 ) {\n    myActiveEffect = { // AE!!!\n      embedded: {\n        ActiveEffect: { \n          aename:{\n            label: aename,\n            icon : icon,\n            changes: myChanges,\n            duration: {\n              \"rounds\": aeturns\n            },\n            flags: {\n              swade: {\n                \"expiration\": expirationBehaviorCode(aeExpirationBehavior),\n                \"favorite\": true\n              }\n            }  \n          }\n        }\n      }      \n    };    \n  } else {\n    myActiveEffect = { // AE!!!\n      embedded: {\n        ActiveEffect:{ \n          aename: {\n            label: aename,\n            icon : icon,\n            changes: myChanges,\n            flags: {\n              swade: {\n                \"favorite\": true\n              }\n            }             \n          }\n        }\n      }\n    }\n  }\n\n  //----------------------------------\n  for (let tokenD of canvas.tokens.controlled) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await warpgate.mutate(tokenD.document, myActiveEffect, {}, {permanent: true});\n  }\n\n  for (let tokenD of Array.from(game.user.targets)) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await warpgate.mutate(tokenD.document, myActiveEffect, {}, {permanent: true});\n  }\n  \n}\n\nfunction keyToMode(mykey) {\n  //let aeTypeAdd = ['system.stats.toughness.armor', 'system.stats.size', 'system.stats.speed.value', 'system.sta0ts.parry.value', 'system.stats.toughness.value' ];\n  let aeTypeOverride = [ 'system.status.isShaken', 'system.status.isDistracted', 'system.status.isVulnerable', 'system.status.isStunned', 'system.status.isEntangled', 'system.status.isBound', 'system.initiative.hasLevelHeaded', 'system.initiative.hasImpLevelHeaded', 'system.initiative.hasHesitant', 'system.initiative.hasQuick' ];\n\n  if ( aeTypeOverride.includes(mykey) ) {\n    return CONST.ACTIVE_EFFECT_MODES.OVERRIDE;\n  } else { // ADD\n    return CONST.ACTIVE_EFFECT_MODES.ADD;\n  }  \n}\n\nfunction keyToValue(mykey, myvalue) {\n  //let aeTypeAdd = ['system.stats.toughness.armor', 'system.stats.size', 'system.stats.speed.value', 'system.stats.parry.value', 'system.stats.toughness.value' ];\n  let aeTypeOverride = [ 'system.status.isShaken', 'system.status.isDistracted', 'system.status.isVulnerable', 'system.status.isStunned', 'system.status.isEntangled', 'system.status.isBound', 'system.initiative.hasLevelHeaded', 'system.initiative.hasImpLevelHeaded', 'system.initiative.hasHesitant', 'system.initiative.hasQuick' ];\n  let aeTypeSteps = ['system.attributes.agility.die.sides', 'system.attributes.smarts.die.sides', 'system.attributes.spirit.die.sides', 'system.attributes.strength.die.sides', 'system.attributes.vigor.die.sides' ];\n\n  if ( aeTypeOverride.includes(mykey) ) {\n    return true;\n  } else if ( aeTypeSteps.includes(mykey) ) {\n    if ([2,4,6,8,10].includes( Math.abs(myvalue) ) ) {\n      return myvalue;\n    } else {\n      return 2;\n    }\n  } else {\n    return myvalue;\n  }  \n}\n\nfunction skillToKey(mykey) {\n  let skillModifier = 'Skill Modifier';  \n  let skillDie = 'Skill Die';  \n\n  if ( mykey.search(skillModifier)>-1 ) {\n    return skillToModifier(mykey);\n  } else if ( mykey.search(skillDie)>-1 ) {\n    return skillToDie(mykey);\n  } else {\n    return -1;\n  }    \n}\n\n// Expiration\n/* 1 start prompt\n// 3 end promt\n*/\nfunction expirationBehaviorCode(expirationBehavior) {\n  if ( expirationBehavior=='startOfTheTurn' ) {\n    return 1;\n  } else {\n    return 3;\n  }    \n}\n\n// return array skills\nfunction tokenSkillReaderLabel(tokenD) {\n  if (tokenD===undefined) return;\n  let items = tokenD.actor.items.filter(e => e.type==='skill');\n  let itemsLabel = [];\n  let itemsList = \"\"; //Display the Chat Card for the selected item\n  for (let item of items) {\n    itemsLabel.push(\"\\\"\" + item.name + \"\\\"\");\n  }\n  return itemsLabel;\n} //return tokenD.actor.items.filter(i => (i.type === 'skill') ).map(i => (i.name));  \n  \nfunction skillToDie(skillName) {\n  skillName = skillName.replace(' Skill Die', '');\n  return '@Skill{'+ skillName + '}[system.die.sides]';\n}\n\nfunction skillToModifier(skillName) {\n  skillName = skillName.replace(' Skill Modifier', '');\n  return '@Skill{'+ skillName + '}[system.die.modifier]';\n}\n\nfunction autoNaming(mykey) {\n\n  if ( mykey.search('system.status.is')>-1 ) {\n    return mykey.replace('system.status.is', '');\n  } else if ( mykey.search('system.stats.speed.runningMod')>-1 ) {    \n    return toTitleCase( 'Running Modifier' );\n  } else if ( mykey.search('system.stats.speed.runningDie')>-1 ) {    \n    return toTitleCase( 'Running Die' );    \n  } else if ( mykey.search('system.stats.')>-1 ) {    \n    return toTitleCase( mykey.replace('system.stats.', '').replace('.value', '').replace('.', ' ') );    \n  } else if ( mykey.search('system.attributes.strength.encumbranceSteps')>-1 ) {                \n    return 'Encumbrance Steps';\n  } else if ( mykey.search('system.initiative.has')>-1 ) {            \n    return mykey.replace('system.initiative.has', '');\n  } else if ( mykey.search('system.attributes.')>-1 ) {\n    return toTitleCase( mykey.replace('system.attributes.', '').replace('.die', ' ') );\n  } else if ( mykey.search('system.die.modifier')>-1 ) {                \n    return mykey.replace('}[system.die.modifier]', '').replace('@Skill{', '') + ' Mod' ;\n  } else if ( mykey.search('system.die.sides')>-1 ) {                    \n    return mykey.replace('}[system.die.sides]', '').replace('@Skill{', '') + ' Die';\n  } else {    \n    return mykey;\n  }  \n} // end autoNaming\n\nfunction toTitleCase(str) {\n  return str.replace(\n    /\\w\\S*/g,\n    function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }\n  );\n}","ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"flags":{"core":{"sourceId":"Macro.hFCYsBIXzOTht2FN"}},"_stats":{"systemId":"swade","systemVersion":"2.0.6","coreVersion":"10.288","createdTime":1666895919959,"modifiedTime":1666895969799,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"_id":"elor2MWIF5yXaygj"}
{"name":"Enchantments for Savage Pathfinder","type":"script","author":"xg4TtZ3QavNbcK8c","img":"icons/weapons/swords/sword-flanged-lightning.webp","scope":"global","command":"// CUSTOMIZE\nconst compendiumLabel = 'Savage Pathfinder Gear'; // YOU CAN REPLACE THIS FOR ANOTHER COMPENDIUM LABEL\nconst craftFolder = 'Craft - Enchantments';\nconst suffix = '🔮';\n//const extraGear = []; // You can add items filtered to the search box. Example: you will not find Arrow, you can add 'Arrow', it will try to find it.\n\nconst version = 'v0.5';\n\n// RULES\n/*\n  type: 'weapon', 'shield', 'armor'\n*/\nconst enchants = {};\nenchants.accurate = {\n  name: \"Accurate\",\n  quality: 1,\n  description: \"The weapon grants the user +1 in the skill required to use it (Fighting, Shooting, or Athletics).\",\n  cost: \"Price: 4,000 gp. Craft: Boost trait, 2,000 gp.\",\n  price: 4000,\n  type: \"weapon\"\n};\nenchants.bane = {\n  name: \"Bane\",\n  quality: 1,\n  description: \"When used against a specific type of creature (dwarf, goblin, elemental, etc), a bane weapon has +2 AP and its damage die increases one type.\",\n  cost: \"Price: 3,000 gp. Craft: Smite, 1,500 gp.\",\n  price: 3000,\n  type: \"weapon\"\n}; \nenchants.brutal = {\n  name: \"Brutal\",\n  quality: 2,\n  description: \"The weapon is considered a Heavy Weapon.\",\n  cost: \"Price: 5,000 gp. Craft: Smite, 2,500 gp.\",\n  price: 5000,\n  type: \"weapon\"\n}; \nenchants.damaging = {\n  name: \"Damaging\",\n  quality: 1,\n  description: \"The weapon’s damage increases by +1.\",\n  cost: \"Price: 3,000 gp. Craft: Smite, 1,500 gp.\",\n  price: 3000,\n  type: \"weapon\"\n};\nenchants.dancing = {\n  name: \"Dancing\",\n  quality: 4,\n  description: \"Melee weapon only. The wielder can command the weapon to dance once per encounter as a limited free action. It animates immediately, attacking as a character for up to five rounds. It uses its master’s Action Card and attack skill, and rolls two of its normal damage dice for damage. The weapon can fly at Pace 10 and counts as an ally for the Gang Up bonus.\",\n  cost: \"Price: 20,000 gp. Craft: Fly, 10,000 gp.\",\n  price: 20000,\n  type: \"weapon\"\n}; \nenchants.distance = {\n  name: \"Distance\",\n  quality: 1,\n  description: \"Ranged weapons only. Decrease any Range penalties by one when using this weapon.\",\n  cost: \"Price: 2,000 gp. Craft: Farsight, 1,000 gp.\",\n  price: 2000,\n  type: \"weapon\"\n}; \nenchants.elemental = {\n  name: \"Elemental\",\n  quality: 1,\n  description: \"The weapon causes damage with an energy Trapping—acid, cold, electricity, fire, or sonic (chosen by creator).\",\n  cost: \"Price: 2,000 gp. Craft: Damaging power with the appropriate energy Trapping, 1,000 gp.\",\n  price: 2000,\n  type: \"weapon\"\n}; \nenchants.keen = {\n  name: \"Keen\",\n  quality: 1,\n  description: \"The weapon is exceptionally sharp, giving it Armor Piercing +2.\",\n  cost: \"Price: 3,000 gp. Craft: Bolt, 1,500 gp.\",\n  price: 3000,\n  type: \"weapon\"\n};   \nenchants.light = {\n  name: \"Light\",\n  quality: 1,\n  description: \"The weapon casts light in a Medium Blast Template. The user activates the illumination with her will as a free action.\",\n  cost: \"Price: 2,000 gp. Craft: Light, 1,000 gp.\",\n  price: 2000,\n  type: \"weapon\"\n}; \nenchants.returning = {\n  name: \"Returning\",\n  quality: 1,\n  description: \"Thrown weapons only. The weapon returns to its user’s hand at the end of her turn.\",\n  cost: \"Price: 3,000 gp. Craft: Conjure item, 1,500 gp.\",\n  price: 3000,\n  type: \"weapon\"\n}; \nenchants.speed = {\n  name: \"Speed\",\n  quality: 3,\n  description: \"If a melee weapon, the user gains the Frenzy Edge. For a ranged weapon, the user gains the Rapid Shot Edge. If the weapon can be used either way, the choice must be made as the weapon is enchanted.\",\n  cost: \"Price: 16,000 gp. Craft: Speed, 8,000 gp.\",\n  price: 16000,\n  type: \"weapon\"\n}; \nenchants.throwing = {\n  name: \"Throwing\",\n  quality: 1,\n  description: \"Melee weapon only. The weapon can be thrown using Athletics (throwing). Its Range is 4/8/16.\",\n  cost: \"Price: 3,000 gp. Craft: Boost Trait, 1,500 gp.\",\n  price: 3000,\n  type: \"weapon\"\n}; \nenchants.vicious = {\n  name: \"Vicious\",\n  quality: 2,\n  description: \"Melee weapon only. If the wielder hits with a raise his damage increases by +4 (in addition to any bonus damage), but he must make a Vigor roll or be Shaken.\",\n  cost: \"Price: 5,000 gp. Craft: Smite, 2,500 gp.\",\n  price: 5000,\n  type: \"weapon\"\n};  \nenchants.vorpal = {\n  name: \"Vorpal\",\n  quality: 5,\n  description: \"Blades only. A vorpal weapon ignores penalties for Called Shots to the head. Anyone Incapacitated by a vorpal blade is decapitated!\",\n  cost: \"Price: 50,000 gp. Craft: Smite, 25,000 gp.\",\n  price: 50000,\n  type: \"weapon\"\n};\n//armor/shield\nenchants.aegis = {\n  name: \"Aegis\",\n  quality: 1,\n  description: \"Armor only. Increases the protective bonus of the armor by +1.\",\n  cost: \"Price: 3,000 gp. Craft: Protection, 1,500 gp.\",\n  price: 3000,\n  type: \"armor\"\n};\nenchants.animated = {\n  name: \"Animated\",\n  quality: 3,\n  description: \"Shield only. Once per encounter, an animated shield can be loosed to defend its wielder. For the next three rounds, it hovers near its owner, following him if he moves and granting its Parry and cover bonus as usual without needing to be held. Its type still applies for purposes of Armor Interference or Restriction.\",\n  cost: \"Price: 10,000 gp. Craft: Fly, 5,000 gp.\",\n  price: 10000,\n  type: \"shield\"\n};\nenchants.arrowdeflection = {\n  name: \"Arrow Deflection\",\n  quality: 1,\n  description: \"Shield only. Ranged attacks against the bearer suffer an additional −1 penalty, regardless of the attacker's position (front, rear, etc).\",\n  cost: \"Price: 3,000 gp. Craft: Deflection, 1,500 gp.\",\n  price: 3000,\n  type: \"shield\"\n};\nenchants.deflecting = {\n  name: \"Deflecting\",\n  quality: 1,\n  description: \"Shield only. Increase the shield’s Parry bonus increased by +1.\",\n  cost: \"Price: 4,000 gp. Craft: Deflection, 2,000 gp.\",\n  price: 4000,\n  type: \"shield\"\n};\nenchants.energyresistance = {\n  name: \"Energy Resistance\",\n  quality: 1,\n  description: \"Armor or shield. Grants environmental resistance against a single energy type, determined at creation, to a piece of armor or a shield. Damage from that source is reduced by 4 when the armor is worn, and the hero adds +4 when resisting any effect tied to that element. A leather jerkin of energy resistance (Cold), for example, helps its wearer avoid Fatigue from exposure (see Hazards on page 151) and damage from any attack with a Trapping of cold, ice, frost, etc.\",\n  cost: \"Price: 2,000 gp. Craft: Environmental protection, 1,000 gp.\",\n  price: 2000,\n  type: \"shield,armor\"\n};\nenchants.etherealness = {\n  name: \"Etherealness\",\n  quality: 2,\n  description: \"Armor only. On command, the wearer of this armor becomes ethereal, gaining minor intangibility. The character can remain ethereal for as long as desired, but once he returns to normal, he cannot use this ability again for 24 hours.\",\n  cost: \"Price: 49,000 gp. Craft: Intangibility, 24,500 gp.\",\n  price: 49000,\n  type: \"armor\"\n};\nenchants.fortification = {\n  name: \"Fortification\",\n  quality: 2,\n  description: \"Armor only. Fortified armor is more likely to turn away a lethal blow. The wearer gains a free reroll on Soak rolls.\",\n  cost: \"Price: 5,000 gp. Craft: Boost Trait, 2,500 gp.\",\n  price: 5000,\n  type: \"armor\"\n};\nenchants.glamered = {\n  name: \"Glamered\",\n  quality: 0,\n  description: \"Armor only. Upon command, as a free action, a piece of glamered armor changes shape and appearance to assume the form of a normal piece of clothing. The armor retains all of its properties when it is so disguised.\",\n  cost: \"Price: 900 gp. Craft: Illusion, 450 gp.\",\n  price: 900,\n  type: \"armor\"\n};\nenchants.reflecting = {\n  name: \"Reflecting\",\n  quality: 4,\n  description: \"Shield only. The shield’s surface is completely reflective. Once per day, the wielder can reflect any power that affects her by making a Spirit roll (at −2 if the casting roll got a raise). If successful the caster suffers the full effects of the power as if he had been the original target.\",\n  cost: \"Price: 16,000 gp. Craft: Dispel, 8,000 gp.\",\n  price: 16000,\n  type: \"shield\"\n};\nenchants.spellresistance = {\n  name: \"Spell Resistance\",\n  quality: 4,\n  description: \"Armor only. The wearer gains the benefits of minor arcane protection.\",\n  cost: \"Price: 16,000 gp. Craft: Arcane protection, 8,000 gp.\",\n  price: 16000,\n  type: \"shield\"\n};\n\n//advanced swpf - armor/shield\nenchants.champion = {\n  name: \"Champion\",\n  quality: 1,\n  description: \"Armor only. This armor property only works for good creatures with the challenge ability (such as cavaliers) or the smite evil ability (such as paladins). The wearer uses one of these abilities, the selected target reduces its melee attacks against the wearer by –2.\",\n  cost: \"Cost: 4,000 gp. Craft: Deflection.\",\n  price: 4000,\n  type: \"armor\"\n};\nenchants.determination = {\n  name: \"Determination\",\n  quality: 2,\n  description: \"A shield or armor with this property helps its owner fight on against seemingly impossible odds. She gains the Nerves of Steel Edge when wearing the armor or bearing the shield.\",\n  cost: \"Cost: 30,000 gp. Craft: Healing.\",\n  price: 30000,\n  type: \"shield,armor\"\n};\nenchants.jousting = {\n  name: \"Jousting\",\n  quality: 1,\n  description: \"Armor only. This suit of armor helps its wearer remain mounted and in control of his mount. She adds +2 to Riding rolls.\",\n  cost: \"Cost: 3,750 gp. Craft: boost Trait.\",\n  price: 3750,\n  type: \"armor\"\n};\nenchants.righteous = {\n  name: \"Righteous\",\n  quality: 2,\n  description: \"Armor only. Armor with this property is often engraved or enameled with religious symbols. Once per day, as a limited action, the wearer may increase his Size by +3 Each increase in Size grants the target a onestep increase to Strength and 1 point of Toughness. Righteous armor does not work for Evil creatures.\",\n  cost: \"Cost: 27,000 gp. Craft: Boost Trait, growth.\",\n  price: 27000,\n  type: \"armor\"\n};\n//weapons\nenchants.allying = {\n  name: \"Allying\",\n  quality: 1,\n  description: \"Melee Only. The weapon grants the wielder the Formation Fighter Edge while it is being used.\",\n  cost: \"Cost: 4,000 gp. Craft: Illusion.\",\n  price: 4000,\n  type: \"weapon\"\n};\nenchants.dueling = {\n  name: \"Dueling\",\n  quality: 2,\n  description: \"1-handed Melee Only. While drawn, a dueling weapon grants the character the Quick Edge. The bearer also gets a free reroll when attempting a called shot on a held item.\",\n  cost: \"Cost: 14,000 gp. Craft: Boost trait.\",\n  price: 14000,\n  type: \"weapon\"\n};\nenchants.huntsman = {\n  name: \"Huntsman\",\n  quality: 1,\n  description: \"A huntsman weapon helps its wielder locate and capture quarry. While it's in hand, he adds +1 to Survival (Tracking) rolls.\",\n  cost: \"Cost: 4,000 gp. Craft: Boost trait.\",\n  price: 4000,\n  type: \"weapon\"\n};\nenchants.transformative = {\n  name: \"Transformative\",\n  quality: 1,\n  description: \"Melee Only. A transformative weapon alters its shape at its wielder’s command, becoming any other melee weapon of the same general shape and handedness. For example, a transformative longsword can transform into any other one-handed melee weapon, such as a scimitar, flail, or trident; but not a great axe. The weapon retains all of its abilities, including enhancements and weapon properties, except those prohibited by its current shape. For example, a keen transformative weapon functions normally in the form of a piercing or slashing weapon, but loses it when in the shape of a bludgeoning weapon. When unattended, a transformative weapon reverts to its true shape.\",\n  cost: \"Cost: 10,000 gp. Craft: Create Object.\",\n  price: 10000,\n  type: \"weapon\"\n};\n\n/* enchantments.\nTODO\n- FLAGs\n1. Choose the item you want, next\n2. Pick the enchantments (checkbox)\n3. create the item, add craft notes, update flags\n\n*/\n\nconst icon = \"icons/weapons/swords/sword-flanged-lightning.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swpf-core-rules\")?.active) { coreRules = true; }\n\nmain();\n\nasync function main() {\n  const items = await getCompendiumEntities( compendiumLabel ); \n  \n  let itemsList = '';\n  for (item of items ) {\n    itemsList += `<option value=\"${item.name}\">\"${item.name}\"</option>`\n  }\n  \n  let template = `\n\n      <h2>Instructions</h2>\n      <p>Choose the item in the field.</p>\n      \n      <table>\n      <tbody>\n      \n      <tr align=center>\n      <td>\n          <b>Gear List</b> \n      </td>  \n      </tr>\n      \n      <tr align=center>\n      <td>\n          <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n          <datalist id=\"aeTypes\">\n            ${itemsList}\n          </datalist>        \n      </td>   \n      </tr>\n\n      </tbody>\n      </table>      \n  `;\n  \n  new Dialog({\n    title: `Enchantments for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: `<i class=\"fas fa-arrow-alt-circle-right\"></i> Next`,\n        callback: async (html) => {\n          let itemLabel = html.find(\"#aeType\")[0].value;\n          \n          let item = await getItem( compendiumLabel, itemLabel );\n          if(!item) {\n            ui.notifications.warn('You must select an item!');\n            return;\n          }\n          selectEnchantmentsForWeapon( item )\n        // END CALLBACK  \n        }\n      }      \n    },\n    default: \"ok\"\n  }).render(true);\n}\n\n// -------------------------------------------------------\n// Functions\nasync function getCompendiumEntities( compendiumLabel='Savage Pathfinder Gear' ) {\n  const compendium = await game.packs.find(p=>p.metadata.label==compendiumLabel);\n  if (!compendium) {\n    console.warn( \"Macros of SWADE: The compendium couldn't be found.\" );\n    return;\n  }\n  let items = await compendium.getDocuments();\n  items = await items.filter(p=> (p.type=='armor' || p.type=='weapon'|| p.type=='shield') && p.name!=\"#[CF_tempEntity]\" );\n  return items;\n}  \n\nasync function getItem( compendiumLabel='Savage Pathfinder Gear', itemLabel ) {\n  let items = await getCompendiumEntities( compendiumLabel );\n  return items.find(p=> p.name==itemLabel);\n}    \n\nasync function selectEnchantmentsForWeapon( item ) {\n  let message='';\n  for (const enchant of Object.entries(enchants)) {\n    if ( !enchant[1].type.includes(item.type) ) continue;\n    message += `<tr>\n      <td class=\"tg-0lax\"><input type=\"checkbox\" id=\"${enchant[0]}\" name=\"${enchant[0]}\"></td>\n      <td class=\"tg-0lax\">\n        <details>\n          <summary><b>${enchant[1].name}</b> <b style=\"color:red;\">(${enchant[1].quality}):</b></summary>\n          <p>${enchant[1].description}</p>\n          <p>${enchant[1].cost}</p>\n        </details>\n      </td>\n    </tr>`;\n    console.log(`<input type=\"checkbox\" id=\"${enchant[0]}\" name=\"${enchant[0]}\">`);\n  }\n\n  let template = `\n    <style type=\"text/css\">\n      .tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;width: 100%}\n      .tg td{border-color:black;border-style:solid;border-width:1px;\n        overflow:hidden;padding:0px 0px;word-break:normal;}\n      .tg th{border-color:black;border-style:solid;border-width:1px;\n        font-weight:normal;overflow:hidden;padding:0px 0px;word-break:normal;}\n      .tg .tg-0lax{text-align:left;vertical-align:middle}    \n    </style>\n\n    <table class=\"tg\">\n    <colgroup>\n       <col span=\"1\" style=\"width: 20%;\">\n       <col span=\"1\" style=\"width: 80%;\">\n    </colgroup>    \n    \n    <tbody>\n      <tr>\n        <td class=\"tg-0lax\" style=\"text-align:center; vertical-align: middle;\"><img src=\"${item.img}\"></td>\n        <td class=\"tg-0lax\"><span style=\"text-align:center; vertical-align: middle; margin-left: 10px;\">${item.name}</span></td>\n      </tr>\n    </tbody>\n    </table>\n    \n    <table class=\"tg\">\n    <colgroup>\n       <col span=\"1\" style=\"width: 8%;\">\n       <col span=\"1\" style=\"width: 92%;\">\n    </colgroup>    \n    \n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"text-align: center;\"><p><b>Enchantments (click the enchantment to expand)</b></p></td>\n      </tr>\n        \n      ${message}\n      \n    </tbody>\n    </table>\n  `;\n  \n  new Dialog({\n    title: `Enchantments for Savage Pathfinder - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: `<i class=\"fas fa-magic\"></i> Craft`,\n        callback: async (html) => {\n          selectedEnchantments=[];\n          for (const enchant of Object.entries(enchants)) {\n            const checkboxValue = html.find( `[name=\"${enchant[0]}\"]` )[0];\n            if ( checkboxValue ) {\n              if ( checkboxValue.checked ) selectedEnchantments.push(enchant[0]); \n            }\n          }\n          enchantItem(selectedEnchantments, item);\n        // END CALLBACK  \n        }\n      }      \n    },\n    default: \"ok\"\n  }).render(true, {height: \"800px\"});  \n  //}).render(true, {height: \"auto\"});  \n}\n\n\nasync function enchantItem( selectedEnchantments, item ) {\n  const itemData = await forgeMasterwork(item.toObject());\n  let description='';\n  // CONFIG THE ITEM\n  itemData.ownership.default = 2;\n  itemData.name = `${suffix} ${itemData.name}`;  \n\n  let quality=0, price=0;\n  description = `<div class=\"swpf-core\"><h2>Enchantment Notes</h2><ul>`;      \n  for (const enchant of Object.entries(enchants)) {\n    if (selectedEnchantments.includes( enchant[0] )) {\n      description += `\n        <li><b>${enchant[1].name}</b> <b style=\"color:red;\">(${enchant[1].quality})</b>: ${enchant[1].description} (${enchant[1].cost})</li>\n      `;\n      quality+=enchant[1].quality;\n      price+=enchant[1].price;\n    }\n  }\n  description += `</ul><p><b>Total Quality:</b> <b style=\"color:red;\">${quality}</b>${quality>5 ? ' <b>MAX QUALITY EXCEEDED</b>':''}</p>`;\n  description += `<p><b>Total Enchantment Cost:</b> <b style=\"color:red;\">${price}</b></p>`;\n\n  description += `</div>`;\n  itemData.system.price = itemData.system.price + price;    \n  itemData.system.description = description + itemData.system.description;\n  // CREATE  \n  const forgedItem = await Item.createDocuments([itemData]);                \n  game.items.get(forgedItem[0].id).sheet.render(true);\n}\n\n// v0.3\nasync function forgeMasterwork( data ) {\n  let description = '';\n  if ( data.type=='shield') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.data.price + 300;    \n  } else if ( data.type=='armor') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.data.price + 150;       \n  } else if ( data.type=='weapon') {\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>+1 AP. Masterwork melee and ranged weapons add 300 gp to the cost.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 300;    \n    data.system.ap = parseInt(data.system.ap) + 1;    \n  } else if (data.type=='shield') {\n    const minStr = parseInt( data.system.minStr.toLowerCase().replace('d', '') );\n    if (minStr>=4) {\n      data.system.minStr = `d${minStr-2}`;\n    }\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Armor and shields reduce the Minimum Strength requirement by one die type, to a minimum of d4.</p>          \n    <p>Shields cost an extra 300 gp, while armor costs an extra 150 gp per piece.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 150;    \n  } else if (data.type=='gear') {\n    description = `<div class=\"swpf-core\">\n    <h2>Craft Notes</h2>\n    <p>Masterwork arrows, bolts, or other ammunition subtract 1 point of Range penalty at Long or Extreme Range, and cost six additional gold pieces per unit.</p>          \n    <p>Masterwork ammunition loses its bonus after use even if recovered.</p>          \n    </div>`;     \n    data.system.description = description + data.system.description;\n    data.system.price = data.system.price + 6;    \n  }\n  \n  const folder = await getFolder(craftFolder, 'Item');\n  data.folder = folder;\n  return data;\n}\n\n// Folder v0.1\nasync function getFolder(folderName, folderType) {\n  let folder;\n  if( game.folders.filter(f => f.type === folderType).find(f => f.name === folderName)===undefined) {\n    folder = await Folder.create( {\n      name: folderName,\n      type: folderType\n    } );\n  } else {\n    folder = game.folders.find( f => f.name === folderName);\n  }\n  return folder;\n}","flags":{"core":{"sourceId":"Macro.trTlVtxLpbzbD6qi"},"cf":{"id":"temp_h089v27spnn"}},"_stats":{"systemId":"swade","systemVersion":"2.1.7","coreVersion":"10.291","createdTime":1665669727456,"modifiedTime":1673281324937,"lastModifiedBy":"xg4TtZ3QavNbcK8c"},"folder":null,"sort":0,"ownership":{"default":0,"xg4TtZ3QavNbcK8c":3},"_id":"fu59nlKehM5P2pIr"}
